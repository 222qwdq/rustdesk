name: Build RustDesk Android APK

on:
  workflow_dispatch:
    inputs:
      upload-artifact:
        description: 'Upload APK to GitHub Release'
        required: true
        default: 'true'

jobs:
  build-rustdesk-android:
    needs: [generate-bridge]
    name: build rustdesk android apk ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { arch: aarch64, target: aarch64-linux-android, os: ubuntu-24.04, reltype: release, suffix: "" }
          - { arch: armv7, target: armv7-linux-androideabi, os: ubuntu-24.04, reltype: release, suffix: "" }
          - { arch: x86_64, target: x86_64-linux-android, os: ubuntu-24.04, reltype: release, suffix: "" }

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: false
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: false

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
               clang cmake curl gcc-multilib git g++ g++-multilib \
               libayatana-appindicator3-dev libasound2-dev libc6-dev \
               libclang-dev libunwind-dev libgstreamer1.0-dev \
               libgstreamer-plugins-base1.0-dev libgtk-3-dev libpam0g-dev \
               libpulse-dev libva-dev libxcb-randr0-dev libxcb-shape0-dev \
               libxcb-xfixes0-dev libxdo-dev libxfixes-dev llvm-dev nasm \
               ninja-build openjdk-17-jdk-headless pkg-config tree wget

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.ANDROID_FLUTTER_VERSION }}

      - name: Patch flutter
        run: |
          cd $(dirname $(dirname $(which flutter)))
          [[ "3.24.5" == ${{env.ANDROID_FLUTTER_VERSION}} ]] && git apply ${{ github.workspace }}/.github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: ${{ env.NDK_VERSION }}
          add-to-path: true

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: /opt/artifacts/vcpkg
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
          doNotCache: false

      - name: Install vcpkg dependencies
        run: |
          case ${{ matrix.job.target }} in
            aarch64-linux-android)
              ANDROID_TARGET=arm64-v8a ;;
            armv7-linux-androideabi)
              ANDROID_TARGET=armeabi-v7a ;;
            x86_64-linux-android)
              ANDROID_TARGET=x86_64 ;;
            i686-linux-android)
              ANDROID_TARGET=x86 ;;
          esac
          if ! ./flutter/build_android_deps.sh "${ANDROID_TARGET}"; then
            find "${VCPKG_ROOT}/" -name "*.log" | while read -r _1; do
              echo "$_1:"; echo "======"; cat "$_1"; echo "======"; echo ""
            done
            exit 1
          fi
        shell: bash

      - name: Restore bridge files
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: "rustfmt"

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: rustdesk-lib-cache-android
          key: ${{ matrix.job.target }}

      - name: Build rustdesk lib
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          rustup target add ${{ matrix.job.target }}
          cargo install cargo-ndk --version ${{ env.CARGO_NDK_VERSION }} --locked
          case ${{ matrix.job.target }} in
            aarch64-linux-android)
              ./flutter/ndk_arm64.sh
              mkdir -p ./flutter/android/app/src/main/jniLibs/arm64-v8a
              cp ./target/${{ matrix.job.target }}/release/liblibrustdesk.so ./flutter/android/app/src/main/jniLibs/arm64-v8a/librustdesk.so ;;
            armv7-linux-androideabi)
              ./flutter/ndk_arm.sh
              mkdir -p ./flutter/android/app/src/main/jniLibs/armeabi-v7a
              cp ./target/${{ matrix.job.target }}/release/liblibrustdesk.so ./flutter/android/app/src/main/jniLibs/armeabi-v7a/librustdesk.so ;;
            x86_64-linux-android)
              ./flutter/ndk_x64.sh
              mkdir -p ./flutter/android/app/src/main/jniLibs/x86_64
              cp ./target/${{ matrix.job.target }}/release/liblibrustdesk.so ./flutter/android/app/src/main/jniLibs/x86_64/librustdesk.so ;;
            i686-linux-android)
              ./flutter/ndk_x86.sh
              mkdir -p ./flutter/android/app/src/main/jniLibs/x86
              cp ./target/${{ matrix.job.target }}/release/liblibrustdesk.so ./flutter/android/app/src/main/jniLibs/x86/librustdesk.so ;;
          esac

      - name: Build APK
        run: |
          pushd flutter/android
          ./gradlew assembleRelease
          popd

      - name: Upload APK
        if: ${{ inputs.upload-artifact == 'true' }}
        uses: actions/upload-artifact@master
        with:
          name: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.apk
          path: flutter/android/app/build/outputs/apk/release/app-release.apk
